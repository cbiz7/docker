version: "3.7"
services:

#   traefik:
#     image: traefik:latest
#     container_name: traefik
#     hostname: traefik
# #    domainname: ${DOMAIN}
#     ports:
#       - "80:80"
#       - "443:443"
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock:ro
#       - ${CONFIG}/traefik:/etc/traefik:rw
#     environment:
#       - PGID
#       - PUID
#       - TZ
#     restart: unless-stopped
#     networks:
#       - web
#       - internal

  ouroboros:
    image: pyouroboros/ouroboros:latest
    container_name: ouroboros
    hostname: ouroboros
    environment:
      - CLEANUP=true
      - CRON="0 3 * * *" # Check for updates every morning at 3am.
      - LOG_LEVEL=info
      - SELF_UPDATE=true
      - IGNORE="rtorrent"
      - TZ
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - internal

  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    hostname: portainer
    command: -H unix:///var/run/docker.sock
    ports:
    - "9000:9000"
    - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONFIG}/portainer:/data
    restart: unless-stopped
    networks:
      - internal

  nzbget:
    image: linuxserver/nzbget:latest
    container_name: nzbget
    hostname: nzbget
    ports:
      - "6789:6789"
    volumes:
      - ${CONFIG}/nzbget:/config
      - ${DOWNLOAD}:/downloads
      - ${DOWNLOAD}/incomplete:/incomplete-downloads
    environment:
      - PGID
      - PUID
      - TZ
    restart: unless-stopped
    networks:
      - internal

  sonarr:
    image: linuxserver/sonarr:preview
    container_name: sonarr
    hostname: sonarr
    dns:
      - "10.0.1.3"
      - "1.1.1.1"
    ports:
      - "8989:8989"
    volumes:
      - ${CONFIG}/sonarr:/config
      - ${DOWNLOAD}:/downloads
      - ${TVSHOWS}:/tv
    environment:
      - PGID
      - PUID
      - TZ
    # labels: ## FOR TRAEFIK 2.0
    #   - traefik.enable=true
    #   - traefik.http.routers.sonarr.rule=Host(`sonarr.jeebs.co`)
    #   - traefik.http.routers.sonarr.entrypoints=websecure
    #   - traefik.http.routers.sonarr.tls=true
    #   - traefik.http.services.sonarr-service.loadbalancer.server.port=8989
    #   - traefik.http.services.sonarr-service.loadbalancer.server.scheme=http
    restart: unless-stopped
    networks:
      - internal

  radarrhd:
    image: linuxserver/radarr:latest
    container_name: radarrhd
    hostname: radarrhd
    dns:
      - "10.0.1.3"
      - "1.1.1.1"
    ports:
      - "7878:7878"
    volumes:
      - ${CONFIG}/radarrhd:/config
      - ${DOWNLOAD}:/downloads
      - ${MOVIES}:/movies
    environment:
      - PGID
      - PUID
      - TZ
    restart: unless-stopped
    networks:
      - internal

  radarr-4k:
    image: linuxserver/radarr:latest
    container_name: radarr4k
    hostname: radarr4k
    dns:
      - "10.0.1.3"
      - "1.1.1.1"
    ports:
      - "7979:7878"
    volumes:
      - ${CONFIG}/radarr4k:/config
      - ${DOWNLOAD}:/downloads
      - ${MOVIES4K}:/movies
    environment:
      - PGID
      - PUID
      - TZ
    restart: unless-stopped
    networks:
      - internal

  lidarr:
    image: linuxserver/lidarr:latest
    container_name: lidarr
    hostname: lidarr
    dns:
      - "10.0.1.3"
      - "1.1.1.1"
    ports:
      - "8686:8686"
    volumes:
      - ${CONFIG}/lidarr:/config
      - /etc/localtime:/etc/localtime:ro
      - ${DOWNLOAD}:/downloads
      - ${MUSIC}:/music
    environment:
      - PGID
      - PUID
    restart: unless-stopped
    networks:
      - internal

  bazarr:
    image: linuxserver/bazarr:latest
    container_name: bazarr
    dns:
      - "10.0.1.3"
      - "1.1.1.1"
    ports:
    - "6767:6767"
    volumes:
      - ${CONFIG}/bazarr:/config
      - ${TVSHOWS}:/tv
      - ${MOVIES}:/movies
    environment:
      - PGID
      - PUID
      - TZ
    restart: unless-stopped
    networks:
      - internal

  nzbhydra2:
    image: linuxserver/hydra2:latest
    container_name: hydra2
    hostname: hydra2
    dns:
      - "10.0.1.3"
      - "1.1.1.1"
    ports:
      - "5076:5076"
    volumes:
      - ${CONFIG}/hydra2:/config
      - ${DOWNLOAD}:/downloads
    environment:
      - PGID
      - PUID
      - TZ
    restart: unless-stopped
    networks:
      - internal

  plex:
    image: linuxserver/plex:latest
    container_name: plex
    hostname: plex
    network_mode: host
    devices:
      - "/dev/dri:/dev/dri" # to enable hardware acceleration
    # ports: # Not needed because running net=host.
    #   - "32400:32400"
    #   - "32400:32400/udp"
    #   - "32469:32469"
    #   - "32469:32469/udp"
    #   - "1900:1900/udp"
    volumes:
      - ${CONFIG}/plex:/config
      - ${TVSHOWS}:/TV Shows
      - ${MOVIES}:/Movies
      - ${MOVIES4K}:/4K Movies
    environment:
      - PGID
      - PUID
      - TZ
      - VERSION=latest
    restart: unless-stopped

  tautulli:
    image: linuxserver/tautulli:latest
    container_name: tautulli
    hostname: tautulli
    ports:
      - "8181:8181"
    volumes:
      - ${CONFIG}/tautulli:/config
      - ${CONFIG}/plex/Library/Application Support/Plex Media Server/Logs:/logs:ro
    environment:
      - PGID
      - PUID
      - TZ
    restart: unless-stopped
    networks:
      - internal

  heimdall:
    image: linuxserver/heimdall:latest
    container_name: heimdall
    hostname: heimdall
    ports:
      - "5443:443"
      - "5080:80"
    volumes:
      - ${CONFIG}/heimdall:/config
    environment:
      - PGID
      - PUID
      - TZ
    restart: unless-stopped
    networks:
      - internal
      - web

  ombi:
    image: linuxserver/ombi:latest
    container_name: ombi
    hostname: ombi
    dns:
      - "10.0.1.3"
      - "1.1.1.1"
    ports:
      - "3579:3579"
    volumes:
      - ${CONFIG}/ombi:/config
    environment:
      - PGID
      - PUID
      - TZ
    networks:
      - internal
      - web

  bookstack:
    image: linuxserver/bookstack:latest
    container_name: bookstack
    hostname: bookstack
    ports:
      - "6875:80"
      - "6876:443"
    volumes:
      - ${CONFIG}/bookstack:/config
    environment:
      - PUID
      - PGID
      - TZ
      - DB_HOST=bookstack-db
      - DB_USER=books
      - DB_PASS=books
      - DB_DATABASE=bookstack
    depends_on:
      - bookstack-db
    restart: unless-stopped
    networks:
      - internal
      - db

  bookstack-db:
    image: linuxserver/mariadb:latest
    container_name: bookstack-db
    hostname: bookstack-db
    volumes:
      - ${CONFIG}/bookstack-db:/config
    environment:
      - PUID
      - PGID
      - TZ
      - MYSQL_USER=books
      - MYSQL_PASSWORD=books
      - MYSQL_DATABASE=bookstack
      - MYSQL_ROOT_PASSWORD=bijou
    restart: unless-stopped
    networks:
      - internal
      - db

  calibre:
    image: linuxserver/calibre-web:latest
    container_name: calibre
    hostname: calibre
    ports:
      - "8083:8083"
    volumes:
      - ${CONFIG}/calibre:/config
      - ${BOOKS}:/books
    environment:
      - PUID
      - PGID
      - TZ
    restart: unless-stopped
    networks:
    - internal

  rtorrent:
    image: wonderfall/rtorrent-flood:latest
    container_name: rtorrent
    hostname: rtorrent
    tty: true # Necessary or rtorrent will use 100% of CPU
    ports:
      - "3000:3000"
      - "51415:49184/udp"
      - "51415:49184/tcp"
    volumes:
      - ${CONFIG}/rtorrent:/flood-db
      - ${TORRENTS}:/data
    environment:
      - UID=1026 # Defined differently in container
      - GID=101 # Defined diffrently in container
      - TZ
      - FLOOD_SECRET=bijou
    networks:
      - internal

  dashmachine:
    image: rmountjoy/dashmachine:latest
    container_name: dashmachine
    hostname: dashmachine
    ports:
      - "5050:5000"
    volumes:
      - ${CONFIG}/dashmachine:/dashmachine/dashmachine/user_data
    environment:
      - PUID
      - PGID
      - TZ
    restart: unless-stopped
    networks:
      - internal

  ghost:
    image: ghost:latest
    container_name: ghost
    hostname: ghost
    ports:
      - "2368:2368"
    volumes:
      - ${CONFIG}/ghost:/var/lib/ghost/content
    #  - ${CONFIG}/ghost/config.production.json:/var/lib/ghost/config.production.json
    environment:
      - PUID
      - PGID
      - TZ
      - database__client=mysql
      - database__connection__host=ghost-db
      - database__connection__user=ghost
      - database__connection__password=ghost
      - database__connection__database=ghostdb
      - url=http://10.0.1.11:2368
    depends_on:
      - ghost-db
    networks:
      - internal
      - db

  ghost-db:
    image: linuxserver/mariadb:latest
    container_name: ghost-db
    hostname: ghost-db
    volumes:
      - ${CONFIG}/ghost-db:/config
    environment:
      - PUID
      - PGID
      - TZ
      - MYSQL_USER=ghost
      - MYSQL_PASSWORD=ghost
      - MYSQL_DATABASE=ghostdb
      - MYSQL_ROOT_PASSWORD=bijou
    restart: unless-stopped
    networks:
      - internal
      - db

  # minecraft:
  #   image: itzg/minecraft-server:latest
  #   container_name: minecraft
  #   hostname: minecraft
  #   ports:
  #     - "25565:25565"
  #     - "25575:25575"
  #   volumes:
  #     - ${CONFIG}/minecraft:/data
  #   environment:
  #     - PUID
  #     - PGID
  #     - TZ
  #     - EULA=true
  #     - ENABLE_RCON=true
  #     - RCON_PASSWORD=bijou
  #     - RCON_PORT=25575
  #     - MEMORY=2G
  #     - LEVEL=world
  #     - TYPE=FABRIC
  #     - VERSION=1.14.4
  #     - FABRICVERSION=LATEST
  #     - SEED=600000222763165
  #     - MOTD=THUNDERDOME MOTHERFUCKERS
  #     - SERVER_NAME=THUNDERDOME
  #     # enable env variable replacement
  #     - REPLACE_ENV_VARIABLES=false
  #     # define an optional prefix for your env variables you want to replace
  #     - ENV_VARIABLE_PREFIX=CFG_
  #     # and here are the actual variables
  #   restart: unless-stopped
  #   networks:
  #     - internal
  #     - web
  #
networks:
  web:
    name: web
    external: true
  internal:
    name: internal
    external: false
  db: #for database using containers
    name: db
    external: false
