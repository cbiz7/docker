version: "3.7"
services:

  # traefik:
  #   image: traefik:latest
  #   container_name: traefik
  #   hostname: traefik
  #   domainname: ${DOMAIN}
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ${CONFIG}/traefik:/etc/traefik:rw
  #   environment:
  #     - PGID
  #     - PUID
  #     - TZ
  #   restart: unless-stopped
  #   networks:
  #     - web
  #     - internal

  ouroboros:
    image: pyouroboros/ouroboros:latest
    container_name: ouroboros
    hostname: ouroboros
    environment:
      - CLEANUP=true
      - CRON="0 3 * * *" # Check for updates every morning at 3am.
      - LOG_LEVEL=info
      - SELF_UPDATE=true
      - IGNORE="rtorrent"
      - TZ
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - internal

  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    hostname: portainer
    command: -H unix:///var/run/docker.sock
    ports:
    - "9000:9000"
    - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONFIG}/portainer:/data
    restart: unless-stopped
    networks:
      - internal

  nzbget:
    image: linuxserver/nzbget:latest
    container_name: nzbget
    hostname: nzbget
    ports:
      - "6789:6789"
    volumes:
      - ${CONFIG}/nzbget:/config
      - ${DOWNLOAD}:/downloads
      - ${DOWNLOAD}/incomplete:/incomplete-downloads
    environment:
      - PGID
      - PUID
      - TZ
    restart: unless-stopped
    networks:
      - internal

  sonarr:
    image: linuxserver/sonarr:preview
    container_name: sonarr
    hostname: sonarr
    ports:
      - "8989:8989"
    volumes:
      - ${CONFIG}/sonarr:/config
      - ${DOWNLOAD}:/downloads
      - ${TVSHOWS}:/tv
    environment:
      - PGID
      - PUID
      - TZ
    # labels: ## FOR TRAEFIK 2.0
    #   - traefik.enable=true
    #   - traefik.http.routers.sonarr.rule=Host(`sonarr.jeebs.co`)
    #   - traefik.http.routers.sonarr.entrypoints=websecure
    #   - traefik.http.routers.sonarr.tls=true
    #   - traefik.http.services.sonarr-service.loadbalancer.server.port=8989
    #   - traefik.http.services.sonarr-service.loadbalancer.server.scheme=http
    restart: unless-stopped
    networks:
      - internal

  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    hostname: radarr
    ports:
      - "7878:7878"
    volumes:
      - ${CONFIG}/radarr:/config
      - ${DOWNLOAD}:/downloads
      - ${MOVIES}:/movies
    environment:
      - PGID
      - PUID
      - TZ
    restart: unless-stopped
    networks:
      - internal

  lidarr:
    image: linuxserver/lidarr:latest
    container_name: lidarr
    hostname: lidarr
    ports:
      - "8686:8686"
    volumes:
      - ${CONFIG}/lidarr:/config
      - /etc/localtime:/etc/localtime:ro
      - ${DOWNLOAD}:/downloads
      - ${MUSIC}:/music
    environment:
      - PGID
      - PUID
    restart: unless-stopped
    networks:
      - internal

  bazarr:
    image: linuxserver/bazarr:latest
    container_name: bazarr
    ports:
    - "6767:6767"
    volumes:
      - ${CONFIG}/bazarr:/config
      - ${TVSHOWS}:/tv
      - ${MOVIES}:/movies
    environment:
      - PGID
      - PUID
      - TZ
    restart: unless-stopped
    networks:
      - internal

  nzbhydra2:
    image: linuxserver/hydra2:latest
    container_name: hydra2
    hostname: hydra2
    ports:
      - "5076:5076"
    volumes:
      - ${CONFIG}/hydra2:/config
      - ${DOWNLOAD}:/downloads
    environment:
      - PGID
      - PUID
      - TZ
    restart: unless-stopped
    networks:
      - internal

  # plex:
  #   image: linuxserver/plex
  #   container_name: plex
  #   hostname: plex
  #   ports:
  #     - "32400:32400"
  #     - "32400:32400/udp"
  #     - "32469:32469"
  #     - "32469:32469/udp"
  #     - "1900:1900/udp"
  #   volumes:
  #     - ${CONFIG}/plex:/config
  #     - ${DATA}/tv:/media/tv
  #     - ${DATA}/movies:/media/movies
  #     - ${DATA}/music:/media/music
  #   environment:
  #     - PGID
  #     - PUID
  #     - TZ
  #     - VERSION=latest
  #   # labels:
  #   #   traefik.enable: "true"
  #   #   traefik.port: "32400"
  #   #   traefik.frontend.rule: "Host:plex.${DOMAIN}"
  #   restart: unless-stopped
  # networks:
  # - internal
  # - web
  #
  tautulli:
    image: linuxserver/tautulli:latest
    container_name: tautulli
    hostname: tautulli
    ports:
      - "8181:8181"
    volumes:
      - ${CONFIG}/tautulli:/config
      - ${CONFIG}/plex/Library/Application Support/Plex Media Server/Logs:/logs:ro
    environment:
      - PGID
      - PUID
      - TZ
    restart: unless-stopped
    networks:
      - internal

  heimdall:
    image: linuxserver/heimdall:latest
    container_name: heimdall
    hostname: heimdall
    ports:
      - "5443:443"
      - "5080:80"
    volumes:
      - ${CONFIG}/heimdall:/config
    environment:
      - PGID
      - PUID
      - TZ
    restart: unless-stopped
    networks:
      - internal
      - web

  ombi:
    image: linuxserver/ombi:latest
    container_name: ombi
    hostname: ombi
    ports:
      - "3579:3579"
    volumes:
      - ${CONFIG}/ombi:/config
    environment:
      - PGID
      - PUID
      - TZ
    networks:
      - internal
      - web

  bookstack:
    image: linuxserver/bookstack:latest
    container_name: bookstack
    hostname: bookstack
    ports:
      - "6875:80"
      - "6876:443"
    volumes:
      - ${CONFIG}/bookstack:/config
    environment:
      - PUID
      - PGID
      - TZ
      - DB_HOST=bookstack-db
      - DB_USER=books
      - DB_PASS=books
      - DB_DATABASE=bookstack
    depends_on:
      - bookstack-db
    restart: unless-stopped
    networks:
      - internal
      - db

  bookstack-db:
    image: linuxserver/mariadb:latest
    container_name: bookstack-db
    hostname: bookstack-db
    volumes:
      - ${CONFIG}/bookstack-db:/config
    environment:
      - PUID
      - PGID
      - TZ
      - MYSQL_USER=books
      - MYSQL_PASSWORD=books
      - MYSQL_DATABASE=bookstack
      - MYSQL_ROOT_PASSWORD=bijou
    restart: unless-stopped
    networks:
      - internal
      - db

  calibre:
    image: linuxserver/calibre-web:latest
    container_name: calibre
    hostname: calibre
    ports:
      - "8083:8083"
    volumes:
      - ${CONFIG}/calibre:/config
      - ${BOOKS}:/books
    environment:
      - PUID
      - PGID
      - TZ
    restart: unless-stopped
    networks:
    - internal

  rtorrent:
    image: wonderfall/rtorrent-flood:latest
    container_name: rtorrent
    hostname: rtorrent
    tty: true # Necessary or rtorrent will use 100% of CPU
    ports:
      - "3000:3000"
      - "51415:49184/udp"
      - "51415:49184/tcp"
    volumes:
      - ${CONFIG}/rtorrent:/flood-db
      - ${TORRENTS}:/data
    environment:
      - UID=1026 # Defined differently in container
      - GID=101 # Defined diffrently in container
      - TZ
      - FLOOD_SECRET=bijou
    networks:
      - internal

  dashmachine:
    image: rmountjoy/dashmachine:latest
    container_name: dashmachine
    hostname: dashmachine
    ports:
      - "5050:5000"
    volumes:
      - ${CONFIG}/dashmachine:/dashmachine/dashmachine/user_data
    environment:
      - PUID
      - PGID
      - TZ
    restart: unless-stopped
    networks:
      - internal

#############################################################
### TESTING MONITORING WITH INFLUXDB / GRAFANA / TELAGRAF
#############################################################
  influxdb:
    image: influxdb:latest
    container_name: influxdb
    hostname: influxdb
    command:  '-config /etc/influxdb/influxdb.conf'
    ports:
      - "8886:8086" # HTTP API port
      - "2003:2003" # Graphite support if enabled
      - "25826:25826" # Collectd support if enabled
      - "4242:4242" # opentsdb support if enabled
      - "8089:8089/udp" # UDP support if enabled
    volumes:
      - ${CONFIG}/influxdb:/var/lib/influxdb
      - ${CONFIG}/influxdb/conf/influxdb.conf:/etc/influxdb/influxdb.conf:ro
      - ${CONFIG}/influxdb/init:/docker-entrypoint-initdb.d:ro
    environment:
      - PUID
      - PGID
      - TZ
      - INFLUXDB_DB=telegraf
      - INFLUXDB_ADMIN_USER=chris
      - INFLUXDB_ADMIN_PASSWORD=bijou
    restart: unless-stopped
    networks:
      - internal
      - db

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    hostname: grafana
    ports:
      - "3000:3000"
    volumes:
      - ${CONFIG}/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=chris
      - GF_SECURITY_ADMIN_PASSWORD=bijou
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - influxdb
    restart: unless-stopped
    networks:
      - internal
      - db

  #  The plugin-driven server agent for collecting & reporting metrics.
  telegraf:
    image: telegraf:alpine
    container_name: telegraf
    hostname: telegraf
    # ports:
      # - "8125:8125" # For StatsD plugin
      # - "8092:8092/udp" # Image opened this. Don't know what's for.
      # - "8094:8094" # putouts.socket_writer
    volumes:
      - ${CONFIG}/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      # -=- Host-monitoring-in-container config start -=-
      # See also: https://www.jacobtomlinson.co.uk/monitoring/2016/06/23/running-telegraf-inside-a-container/
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/rootfs/sys:ro
      - /proc:/rootfs/proc:ro
      - /etc:/rootfs/etc:ro
    environment:
      - HOST_SYS=/rootfs/sys
      - HOST_PROC=/rootfs/proc
      - HOST_ETC=/rootfs/etc
      # -=- Host-monitoring-in-container config end -=-
    # links:
    #   - influxdb
    networks:
      - internal
      - db


networks:
  web:
    name: web
    external: true
  internal:
    name: internal
    external: false
  db: #for database using containers
    name: db
    external: false
